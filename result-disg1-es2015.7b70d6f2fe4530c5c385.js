addEventListener("message",({data:n})=>{const e=n=>{let e=null;try{const a=n.toString().trim();a.length>0&&(t=+a,e=isNaN(t)?null:t)}catch(a){e=null}var t;return e},t=n.jsonData,a={},r={},s={};let l=null;try{for(const n of Object.keys(t)){const l=new Array,m=t[n];if("object"!=typeof m||!("disg"in m))continue;const _=m.disg;let o=0,d=0,i={max_d:-65535,max_r:-1e3*Math.PI,min_d:65535,min_r:1e3*Math.PI,max_d_m:"0",max_r_m:"0",min_d_m:"0",min_r_m:"0"};for(const n of Object.keys(_)){const t=n.replace("node","");if(t.includes("n")||t.includes("l"))continue;const a=_[n];let r=e(a.dx),s=e(a.dy),m=e(a.dz),c=e(a.rx),u=e(a.ry),x=e(a.rz);r=null==r?0:1e3*r,s=null==s?0:1e3*s,m=null==m?0:1e3*m,c=null==c?0:1e3*c,u=null==u?0:1e3*u,x=null==x?0:1e3*x,l.push({id:t,dx:r,dy:s,dz:m,rx:c,ry:u,rz:x});for(const e of[r,s,m])Math.abs(o)<Math.abs(e)&&(o=e),i.max_d<e&&(i.max_d=e,i.max_d_m=n),i.min_d>e&&(i.min_d=e,i.min_d_m=n);for(const e of[c,u,x])Math.abs(d)<Math.abs(e)&&(d=e),i.max_r<e&&(i.max_r=e,i.max_r_m=n),i.min_r>e&&(i.min_r=e,i.min_r_m=n)}const c=n.replace("Case","");a[c]=l,r[c]=Math.abs(o),s[c]=i}}catch(m){l=m}postMessage({disg:a,max_value:r,value_range:s,error:l})});