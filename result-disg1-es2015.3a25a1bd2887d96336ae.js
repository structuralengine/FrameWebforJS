addEventListener("message",({data:t})=>{const e=t=>{let e=null;try{const s=t.toString().trim();s.length>0&&(n=+s,e=isNaN(n)?null:n)}catch(s){e=null}var n;return e},n=t.jsonData,s={};let l=null;try{for(const t of Object.keys(n)){const l=new Array,a=n[t];if("object"!=typeof a||!("disg"in a))continue;const o=a.disg;let r=0,c=0;for(const t of Object.keys(o)){const n=t.replace("node","");if(n.includes("n")||n.includes("l"))continue;const s=o[t];let a=e(s.dx),u=e(s.dy),d=e(s.dz),i=e(s.rx),f=e(s.ry),y=e(s.rz);a=null==a?0:1e3*a,u=null==u?0:1e3*u,d=null==d?0:1e3*d,i=null==i?0:1e3*i,f=null==f?0:1e3*f,y=null==y?0:1e3*y,l.push({id:n,dx:a,dy:u,dz:d,rx:i,ry:f,rz:y});for(const t of[a,u,d])Math.abs(r)<Math.abs(t)&&(r=t);for(const t of[i,f,y])Math.abs(c)<Math.abs(t)&&(c=t)}s[t.replace("Case","")]=l,s["max_value"+t]=Math.abs(r)}}catch(a){l=a}postMessage({disg:s,error:l})});