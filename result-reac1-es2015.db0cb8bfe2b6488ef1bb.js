addEventListener("message",({data:n})=>{const t=n=>{let t=null;try{const m=n.toString().trim();m.length>0&&(a=+m,t=isNaN(a)?null:a)}catch(m){t=null}var a;return t},a=n.jsonData,m={},e={},r={};let l=null;try{for(const n of Object.keys(a)){const l=new Array,_=a[n];if("object"!=typeof _||!("reac"in _))continue;const o=_.reac;if(null===o)continue;let s=0,c=0,i={max_d:-65535,max_r:-65535,min_d:65535,min_r:65535,max_d_m:"0",max_r_m:"0",min_d_m:"0",min_r_m:"0"};for(const n of Object.keys(o)){const a=o[n];let m=t(a.tx),e=t(a.ty),r=t(a.tz),_=t(a.mx),u=t(a.my),d=t(a.mz);const x={id:n.replace("node",""),tx:null==m?0:-m,ty:null==e?0:-e,tz:null==r?0:-r,mx:null==_?0:_,my:null==u?0:u,mz:null==d?0:-d};l.push(x);for(const t of[m,e,r])Math.abs(s)<Math.abs(t)&&(s=t),i.max_d<t&&(i.max_d=t,i.max_d_m=n),i.min_d>t&&(i.min_d=t,i.min_d_m=n);for(const t of[_,u,d])Math.abs(c)<Math.abs(t)&&(c=t),i.max_r<t&&(i.max_r=t,i.max_r_m=n),i.min_r>t&&(i.min_r=t,i.min_r_m=n)}const u=n.replace("Case","");m[u]=l,e[u]=Math.abs(s),r[u]=i}}catch(_){l=_}postMessage({reac:m,error:l,max_value:e,value_range:r})});