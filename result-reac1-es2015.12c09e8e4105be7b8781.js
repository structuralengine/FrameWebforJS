addEventListener("message",({data:n})=>{const t=n=>{let t=null;try{const a=n.toString().trim();a.length>0&&(m=+a,t=isNaN(m)?null:m)}catch(a){t=null}var m;return t},m=n.jsonData,a={},e={},r={};let _=null;try{for(const n of Object.keys(m)){const _=new Array,l=m[n];if("object"!=typeof l||!("reac"in l))continue;const o=l.reac;if(null===o)continue;let c={max_d:-65535,max_r:-65535,min_d:65535,min_r:65535,max_d_m:"0",max_r_m:"0",min_d_m:"0",min_r_m:"0"};for(const n of Object.keys(o)){const m=o[n];let a=t(m.tx),e=t(m.ty),r=t(m.tz),l=t(m.mx),s=t(m.my),i=t(m.mz);const d={id:n.replace("node",""),tx:null==a?0:-a,ty:null==e?0:-e,tz:null==r?0:-r,mx:null==l?0:l,my:null==s?0:s,mz:null==i?0:-i};_.push(d);for(const t of[a,e,r])c.max_d<t&&(c.max_d=t,c.max_d_m=n),c.min_d>t&&(c.min_d=t,c.min_d_m=n);for(const t of[l,s,i])c.max_r<t&&(c.max_r=t,c.max_r_m=n),c.min_r>t&&(c.min_r=t,c.min_r_m=n)}const s=n.replace("Case","");a[s]=_,e[s]=Math.max(Math.abs(c.max_d),Math.abs(c.min_d)),r[s]=c}}catch(l){_=l}postMessage({reac:a,error:_,max_value:e,value_range:r})});