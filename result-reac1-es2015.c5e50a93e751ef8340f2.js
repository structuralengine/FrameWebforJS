addEventListener("message",({data:n})=>{const m=n=>{let m=null;try{const a=n.toString().trim();a.length>0&&(t=+a,m=isNaN(t)?null:t)}catch(a){m=null}var t;return m},t=n.jsonData,a={},e={},r={};let _=null;try{for(const n of Object.keys(t)){const _=new Array,l=t[n];if("object"!=typeof l||!("reac"in l))continue;const o=l.reac;if(null===o)continue;let c={max_d:Number.MIN_VALUE,max_r:Number.MIN_VALUE,min_d:Number.MAX_VALUE,min_r:Number.MAX_VALUE,max_d_m:"0",max_r_m:"0",min_d_m:"0",min_r_m:"0"};for(const n of Object.keys(o)){const t=o[n];let a=m(t.tx),e=m(t.ty),r=m(t.tz),l=m(t.mx),s=m(t.my),i=m(t.mz);const u={id:n.replace("node",""),tx:null==a?0:-a,ty:null==e?0:-e,tz:null==r?0:-r,mx:null==l?0:l,my:null==s?0:s,mz:null==i?0:-i};_.push(u);for(const m of[a,e,r])c.max_d<m&&(c.max_d=m,c.max_d_m=n),c.min_d>m&&(c.min_d=m,c.min_d_m=n);for(const m of[l,s,i])c.max_r<m&&(c.max_r=m,c.max_r_m=n),c.min_r>m&&(c.min_r=m,c.min_r_m=n)}const s=n.replace("Case","");a[s]=_,e[s]=Math.max(Math.abs(c.max_d),Math.abs(c.min_d)),r[s]=c}}catch(l){_=l}postMessage({reac:a,error:_,max_value:e,value_range:r})});