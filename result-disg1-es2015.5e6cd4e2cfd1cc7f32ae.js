addEventListener("message",({data:n})=>{const e=n=>{let e=null;try{const a=n.toString().trim();a.length>0&&(t=+a,e=isNaN(t)?null:t)}catch(a){e=null}var t;return e},t=n.jsonData,a={},r={},m={};let l=null;try{for(const n of Object.keys(t)){const l=new Array,_=t[n];if("object"!=typeof _||!("disg"in _))continue;const s=_.disg;let d={max_d:-65535,max_r:-1e3*Math.PI,min_d:65535,min_r:1e3*Math.PI,max_d_m:"0",max_r_m:"0",min_d_m:"0",min_r_m:"0"};for(const n of Object.keys(s)){const t=n.replace("node","");if(t.includes("n")||t.includes("l"))continue;const a=s[n];let r=e(a.dx),m=e(a.dy),_=e(a.dz),o=e(a.rx),i=e(a.ry),c=e(a.rz);r=null==r?0:1e3*r,m=null==m?0:1e3*m,_=null==_?0:1e3*_,o=null==o?0:1e3*o,i=null==i?0:1e3*i,c=null==c?0:1e3*c,l.push({id:t,dx:r,dy:m,dz:_,rx:o,ry:i,rz:c});for(const e of[r,m,_])d.max_d<e&&(d.max_d=e,d.max_d_m=n),d.min_d>e&&(d.min_d=e,d.min_d_m=n);for(const e of[o,i,c])d.max_r<e&&(d.max_r=e,d.max_r_m=n),d.min_r>e&&(d.min_r=e,d.min_r_m=n)}const o=n.replace("Case","");a[o]=l,r[o]=Math.max(Math.abs(d.max_d),Math.abs(d.min_d)),m[o]=d}}catch(_){l=_}postMessage({disg:a,max_value:r,value_range:m,error:l})});